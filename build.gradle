/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
  }
}

plugins {
    id 'jacoco'
    id "com.github.kt3k.coveralls" version "2.10.1"
    id 'com.github.spotbugs' version '3.0.0'
    id 'java'
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'


sourceSets {
      main {
         java {
            srcDir 'src/main/java'
         }
      }
      test {
         java {
            srcDir 'src/test/java'
         }
      }
}


// Java Application Dependencies & properties
sourceCompatibility = 1.8
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {

    // For internal usage
    implementation('com.google.guava:guava:21.0')
    
    // JUnit Jupiter API and TestEngine implementation
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.5.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.5.1')
    testImplementation('junit:junit:4.13')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine:5.5.1')

}


// Plugins setup

eclipse {
	project {
		name = 'dama'
	}
}

checkstyle {
	// Whether to allow the build to continue if there are warnings. Default: ignoreFailures = false
	ignoreFailures = true
	sourceSets = [sourceSets.main]
	// Checkstyle version
	toolVersion "8.8"
}


spotbugs {
    ignoreFailures = true
    toolVersion = '4.0.1'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


junitPlatform {
	// platformVersion '1.1.0'
	filters {
		engines {
			include 'junit-jupiter'
			// exclude 'custom-engine'
		}
	}
	// configurationParameter 'junit.jupiter.conditions.deactivate', '*'
	enableStandardTestTask true
	reportsDir file("${buildDir}/test-results/junit-platform") // this is the default
	//logManager 'org.apache.logging.log4j.jul.LogManager'
}


jacocoTestReport {
    // Show code coverage results
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    executionData(fileTree(project.rootDir.absolutePath).include("**/${buildDir}/jacoco/*.exec"))
    // additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport_html/")
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}


test {

    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform{
        //includeTags 'fast'
        excludeTags 'slow', 'db'
    }

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
    
    finalizedBy jacocoTestReport
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'it.uniba.main/AppMain'
    }
    archiveBaseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
project.tasks.getByName('build').dependsOn fatJar

// Main class
mainClassName = 'it.uniba.main/AppMain'
